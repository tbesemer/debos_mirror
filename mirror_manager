#!/bin/bash

# General mirror management settings.
#
CUR_MIRROR_INDEX=`date +"w%U_%Y"`
CUR_MIRROR_ROOT="/var/www/html/mirror"
LOG_FILE_ROOT="."

# Mirror operation settings.
#
PIP_FLIST_NAME="none"
GIT_FLIST_NAME="none"
WGET_FLIST_NAME="none"
DEBIAN_RELEASE_NAME="stretch"
DEBIAN_MIRROR_OP="no"

# Debian specific settings.
#
DEBIAN_HOST=ftp.us.debian.org;
DEBIAN_SECURITY_HOST=security.debian.org;
DEBIAN_ARCH="amd64,i386"

# Bandersnatch image. FIXME: Need to tie to a release that is cached.
#
BANDERSNATCH_IMAGE="pypa/bandersnatch:latest"

show_opts() {

    echo ""
    echo "$0: Current Options"
    echo ""
    echo "CUR_MIRROR_INDEX:     $CUR_MIRROR_INDEX"
    echo "CUR_MIRROR_ROOT:      $CUR_MIRROR_ROOT"
    echo "LOG_FILE_ROOT:        $LOG_FILE_ROOT"
    echo ""
}

show_help() {

    echo ""
    echo "$0: Peform all mirroring operations:"
    echo "   -p file           # PIP Filelist."
    echo "   -w file           # wget Filelist."
    echo "   -g file           # git Filelist for bare clones."
    echo "   -d release_name   # Debian release name, default [stretch]."
    echo "   -o                # Do Debian Mirror." 
    echo "   -r root_path      # Root Path, default </var/www/html/mirror>."
    echo "   -l log_path       # Logfile Path, default <./>."
    echo "   -s                # Show settings and exit."
    echo "   -a mirror_index   # Override automatich mirror index <wxx_yyyy."
    echo "   -h                # Help."
    echo ""
    echo "  Actions are only taken on flags specified."
    echo ""
}

run_debian_mirror() {

    #  Set the Mirror Root in Configuration.
    #
    FULL_MIRROR_PATH="$CUR_MIRROR_ROOT/debian/$DEBIAN_RELEASE_NAME/$CUR_MIRROR_INDEX"

    cat mirror.list.template | awk -v rootdir="$FULL_MIRROR_PATH" \
             '{sub( "__MIRROR_ROOT__", rootdir ); print }' >  mirror.list

    sudo mkdir -p $FULL_MIRROR_PATH
    sudo cp -p mirror.list /etc/apt/mirror.list
    sudo apt-mirror

    pushd $FULL_MIRROR_PATH
    sudo mv mirror/ftp.us.debian.org/debian/ .
    sudo mv mirror/security.debian.org/debian-security/ .
    popd
   
}


run_pip_mirror() {

    #  Validate that we have correct input files.
    #
    if [ ! -f bandersnatch.conf-template ]
    then
        echo "$0: Missing <banderstantch.conf-template>"
        exit 1
    fi

    if [ ! -f $LOG_FILE_ROOT/$PIP_FLIST_NAME ]
    then
        echo "$0: Missing <$LOG_FILE_ROOT/$PIP_FLIST_NAME>"
        exit 1
    fi

    # Check for Bandersnatch, pull if missing.
    #
    echo "$0: Checking for [$BANDERSNATCH_IMAGE]"
    docker inspect --type image $BANDERSNATCH_IMAGE &> /dev/null
    if [ $? -ne 0 ]
    then
        echo "$0: [$BANDERSNATCH_IMAGE] missing, pulling"
        docker pull $BANDERSNATCH_IMAGE
        if [ $? -ne 0 ]
        then
            echo "$0: docker pull $BANDERSNATCH_IMAGE failed"
            exit 1
        fi
    fi

    #  Set the Mirror Root in Configuration.
    #
    FULL_MIRROR_PATH="$CUR_MIRROR_ROOT/pip/$DEBIAN_RELEASE_NAME/$CUR_MIRROR_INDEX"
    cat bandersnatch.conf-template | awk -v rootdir="$FULL_MIRROR_PATH" \
             '{sub( "__MIRROR_ROOT__", rootdir ); print }' >  bandersnatch.conf

    #  Install the PIP package list.
    #
    while IFS="" read -r p || [ -n "$p" ]
    do
        printf '    %s\n' "$p" >> bandersnatch.conf
    done < $LOG_FILE_ROOT/$PIP_FLIST_NAME

    # Perform the mirror operation.
    #
    docker run -it --rm -v $PWD/bandersnatch.conf:/etc/bandersnatch.conf:ro \
        -v ${CUR_MIRROR_ROOT}:${CUR_MIRROR_ROOT} pypa/bandersnatch:latest bandersnatch mirror

    return $?
}

run_wget_mirror() {

    # Validate we have list of wget paths
    #
    if [ ! -f $LOG_FILE_ROOT/$WGET_FLIST_NAME ]
    then
        echo "$0: Missing <$LOG_FILE_ROOT/$WGET_FLIST_NAME>"
        exit 1
    fi

    #  Build full mirror path, and create directory.
    #
    FULL_MIRROR_PATH="$CUR_MIRROR_ROOT/wget/$DEBIAN_RELEASE_NAME/$CUR_MIRROR_INDEX"
    mkdir -p $FULL_MIRROR_PATH
    if [ $? -ne 0 ]
    then
        echo "$0: Failed to create <$FULL_MIRROR_PATH>"
        exit 1
    fi

    #  Install the WGET package list.
    # 
    #  Note that the strings have long names with characters that
    #  need to be escaped; if we read the list from a file wget
    #  duplicates the name.
    # 
    #  We are allowing exit code of 8, which is general fetch
    #  error - some Debian stuff doesn't exist.  Probably
    #  should validate downloads better.  For now, just
    #  check the logs after a mirror operation.
    #
    cp $LOG_FILE_ROOT/$WGET_FLIST_NAME $FULL_MIRROR_PATH
    pushd $FULL_MIRROR_PATH 2>&1 > /dev/null
    wget -o wget_normal_log.txt --rejected-log=wget_rejected_log.txt -i $WGET_FLIST_NAME
    RSTAT=$?
    if [ $RSTAT -ne 0 ] && [ $RSTAT -ne 8 ]
    then
        echo "$0: wget failed on mirror operation, $RSTAT"
        popd
        return 1
    fi
    popd 2>&1 > /dev/null

    return 0
}

run_git_clones() {

    # Validate we have list of git repositories
    #
    if [ ! -f $LOG_FILE_ROOT/$GIT_FLIST_NAME ]
    then
        echo "$0: Missing <$LOG_FILE_ROOT/$GIT_FLIST_NAME>"
        exit 1
    fi

    #  Build full mirror path, and create directory.
    #
    FULL_MIRROR_PATH="$CUR_MIRROR_ROOT/git/$DEBIAN_RELEASE_NAME/$CUR_MIRROR_INDEX"
    mkdir -p $FULL_MIRROR_PATH
    if [ $? -ne 0 ]
    then
        echo "$0: Failed to create <$FULL_MIRROR_PATH>"
        exit 1
    fi

    #  Bare Clone the git repositories.
    #
    #  FIXME: We need to make this more sophisticated, and
    #  determine if we have internal/local clones already,
    #  and in that case, pull those, and then pull from
    #  the origianl upstream to get them current.
    #
    while IFS="" read -r p || [ -n "$p" ]
    do
        pushd $FULL_MIRROR_PATH 2>&1 > /dev/null
        printf '%s\n' "$p"
	git clone --bare $p
        RSTAT=$?
        popd 2>&1 > /dev/null

        if [ $RSTAT -ne 0 ]
        then
            echo "$0: git clone --bare failed on $p, RSTAT==$RSTAT"
            return 1
        fi

    done < $LOG_FILE_ROOT/$GIT_FLIST_NAME

    return 0
}

while getopts ":hp:w:g:d:r:l:a:so" opt; do
  case ${opt} in
    p )
      PIP_FLIST_NAME=$OPTARG
      if [ ! -f $LOG_FILE_ROOT/$PIP_FLIST_NAME ]
      then
          echo "$0: Invalid PIP_FLIST_NAME <$LOG_FILE_ROOT/$PIP_FLIST_NAME>"
          show_opts;
          exit 1
      fi
      ;;
    w )
      WGET_FLIST_NAME=$OPTARG
      if [ ! -f $LOG_FILE_ROOT/$WGET_FLIST_NAME ]
      then
          echo "$0: Invalid PIP_FLIST_NAME <$LOG_FILE_ROOT/$WGET_FLIST_NAME>"
          show_opts;
          exit 1
      fi
      ;;
    g )
      GIT_FLIST_NAME=$OPTARG
      if [ ! -f $LOG_FILE_ROOT/$GIT_FLIST_NAME ]
      then
          echo "$0: Invalid PIP_FLIST_NAME <$LOG_FILE_ROOT/$GIT_FLIST_NAME>"
          show_opts;
          exit 1
      fi
      ;;
    d )
      DEBIAN_RELEASE_NAME=$OPTARG
      ;;
    r )
      CUR_MIRROR_ROOT=$OPTARG
      if [ ! -d $CUR_MIRROR_ROOT ]
      then
          echo "$0: Invalid CUR_MIRROR_ROOT <$CUR_MIRROR_ROOT>"
          show_opts;
          exit 1
      fi
      ;;
    l )
      LOG_FILE_ROOT=$OPTARG
      if [ ! -d $LOG_FILE_ROOT ]
      then
          echo "$0: Invalid LOG_FILE_ROOT <$LOG_FILE_ROOT>"
          show_opts;
          exit 1
      fi
      ;;
    o )
      DEBIAN_MIRROR_OP="yes"
      ;;
    a )
      CUR_MIRROR_INDEX=$OPTARG
      echo "$0: Override CUR_MIRROR_INDEX with [$CUR_MIRROR_INDEX]"
      ;;
    s )
      show_opts;
      exit 0
      ;;
    h )
      show_help;
      ;;
    \? )
      echo "Invalid option: $OPTARG" 1>&2
      show_help;
      ;;
    : )
      echo "Invalid option: $OPTARG requires an argument" 1>&2
      show_help;
      ;;
  esac
done
shift $((OPTIND -1))

#  Execute commands.
#
if [ $PIP_FLIST_NAME != "none" ]
then
    run_pip_mirror;
    if [ $? -ne 0 ]
    then
        echo "$0: run_pip_mirror returned non-zero exit code"
        exit 1
    fi
fi

if [ $WGET_FLIST_NAME != "none" ]
then
    run_wget_mirror;
    if [ $? -ne 0 ]
    then
        echo "$0: run_wget_mirror returned non-zero exit code"
        exit 1
    fi
fi

if [ $GIT_FLIST_NAME != "none" ]
then
    run_git_clones;
    if [ $? -ne 0 ]
    then
        echo "$0: run_git_clones returned non-zero exit code"
        exit 1
    fi
fi

if [ $DEBIAN_MIRROR_OP == "yes" ]
then
    run_debian_mirror;
    if [ $? -ne 0 ]
    then
        echo "$0: run_debian_mirror returned non-zero exit code"
        exit 1
    fi
fi
